.{
    .name = "example_glfw_opengl",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.0.0",
    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    .minimum_zig_version = "0.12.0",
    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    .dependencies = .{
        // See `zig fetch --save <url>` for a command-line interface for adding dependencies.
        //.example = .{
        //    // When updating this field to a new URL, be sure to delete the corresponding
        //    // `hash`, otherwise you are communicating that you expect to find the old hash at
        //    // the new URL.
        //    .url = "https://example.com/foo.tar.gz",
        //
        //    // This is computed from the file contents of the directory of files that is
        //    // obtained after fetching `url` and applying the inclusion rules given by
        //    // `paths`.
        //    //
        //    // This field is the source of truth; packages do not come from a `url`; they
        //    // come from a `hash`. `url` is just one of many possible mirrors for how to
        //    // obtain a package matching this `hash`.
        //    //
        //    // Uses the [multihash](https://multiformats.io/multihash/) format.
        //    .hash = "...",
        //
        //    // When this is provided, the package is found in a directory relative to the
        //    // build root. In this case the package's hash is irrelevant and therefore not
        //    // computed. This field and `url` are mutually exclusive.
        //    .path = "foo",
        //},
        .glslang = .{
            .hash = "1220b2cdab3c4a05c8044d7e45e9e6d7296e49a0504e4be41fb55171811a6f1bd5d7",
            .lazy = true,
            .url = "git+https://gitlab.com/joshua.software.dev/glslang-zig.git#815fd3460c9f45030495516ee9a6ddac47f59aa9",
        },
        .mach_glfw = .{
            .hash = "12207679d7344c1d1208e68af38000197257205d8188e8a9b4898c00cabb0cd66613",
            .url = "git+https://codeberg.org/joshua-software-dev/mach-glfw-unrestricted.git#89ddd37e2578e313ef09c855857e4dd71fab81fa",
        },
        .MoltenVK = .{
            .hash = "12202e83f182946d8b22c8a219e2a85aca5fdb5fe1de3953b8f28b1e2ffd8d0c2241",
            .lazy = true,
            .url = "https://github.com/KhronosGroup/MoltenVK/releases/download/v1.2.8/MoltenVK-macos.tar",
        },
        .swiftshader_zigbuild = .{
            .hash = "1220b232e1de6b049e8a3994c9e1ab6b7bb23289fa8a002f5b4ddb92431ea28f4802",
            .lazy = true,
            // .path = "../../../swiftshader_zig/",
            .url = "git+https://codeberg.org/joshua-software-dev/swiftshader_zigbuild.git#dd39a0d925cdd1861f5613d45e339d314aa8c443",
        },
        .vulkan_docs = .{
            .hash = "12203f13b015a969821cce5bd8dbd16fdc9f5a94f1352d8e140b0aa6c633016e535a",
            .url = "git+https://github.com/KhronosGroup/Vulkan-Docs.git#69ba4fefbafa045d0fd1b07060b768b3b1c115cc",
        },
        .vulkan_zig = .{
            .hash = "122085abbcfa0328f5f6e0e702d25ee0a61bb92d0ce9ba415a2fea1d33f43129cb66",
            .url = "git+https://github.com/Snektron/vulkan-zig.git#ac4103a733c479b599aae8d42c08cabd7d5cf48a",
        },
        .xcode_frameworks = .{
            .hash = "122010c1a745ea06dee3012fbd3b311bd3d75ec39ded6bf566b36ebe3cd8da482347",
            .url = "git+https://github.com/hexops/xcode-frameworks.git#2fca968efa90a4060803c56dd0f027890353f0a9",
        },
        .ZigImGui = .{
            .path = "../../",
        },
    },
    // Specifies the set of files and directories that are included in this package.
    // Only files and directories listed here are included in the `hash` that
    // is computed for this package.
    // Paths are relative to the build root. Use the empty string (`""`) to refer to
    // the build root itself.
    // A directory listed here means that all files within, recursively, are included.
    .paths = .{
        // This makes *all* files, recursively, included in this package. It is generally
        // better to explicitly list the files and directories instead, to insure that
        // fetching from tarballs, file system paths, and version control all result
        // in the same contents hash.
        "",
        // For example...
        //"build.zig",
        //"build.zig.zon",
        //"src",
        //"LICENSE",
        //"README.md",
    },
}
